<%- include('./partials/auth-header', { title: 'Reset Password - ChatApp' }) %>

<div class="card-wrapper">
  <div class="auth-card">
    <div class="text-center mb-4">
      <div class="login-icon mb-3">
        <i class="fas fa-lock robot-icon"></i>
        <div class="robot-pulse"></div>
      </div>
      <h2 class="card-title">Réinitialiser le mot de passe</h2>
      <p class="text-muted">Créez votre nouveau mot de passe sécurisé</p>
    </div>
    
    <% if (typeof errors !== 'undefined' && errors.length > 0) { %>
      <div class="alert alert-danger alert-dismissible fade show" role="alert">
        <i class="fas fa-exclamation-circle me-2"></i>
        <div>
          <ul class="list-unstyled m-0">
            <% errors.forEach(error => { %>
              <li><%= error.msg %></li>
            <% }) %>
          </ul>
        </div>
      </div>
    <% } %>
    
    <form action="" method="POST" class="needs-validation" novalidate>
      <input type="hidden" name="token" value="<%= token %>">
      
      <div class="form-floating mb-3">
        <input 
          type="password" 
          class="form-control" 
          id="password" 
          name="password" 
          placeholder=" "
          required
          aria-required="true"
          aria-describedby="passwordFeedback"
          minlength="6"
          autocomplete="new-password"
        >
        <label for="password"><i class="fas fa-lock me-1"></i> Nouveau mot de passe</label>
        <button type="button" class="btn btn-link password-toggle" id="togglePassword" aria-label="Afficher/masquer le mot de passe" tabindex="0">
          <i class="fas fa-eye" aria-hidden="true"></i>
        </button>
        <div class="invalid-feedback" id="passwordFeedback">
          <span class="empty-feedback">Veuillez entrer un mot de passe</span>
          <span class="length-feedback d-none">Le mot de passe doit contenir au moins 6 caractères</span>
        </div>
      </div>
      
      <div class="form-floating mb-4">
        <input 
          type="password" 
          class="form-control" 
          id="confirmPassword" 
          name="confirmPassword" 
          placeholder=" " 
          required
          aria-required="true"
          aria-describedby="confirmPasswordFeedback"
          autocomplete="new-password"
        >
        <label for="confirmPassword"><i class="fas fa-lock me-1"></i> Confirmer le mot de passe</label>
        <button type="button" class="btn btn-link password-toggle" id="toggleConfirmPassword" aria-label="Afficher/masquer la confirmation du mot de passe" tabindex="0">
          <i class="fas fa-eye" aria-hidden="true"></i>
        </button>
        <div class="invalid-feedback" id="confirmPasswordFeedback">
          <span class="empty-feedback">Veuillez confirmer votre mot de passe</span>
          <span class="match-feedback d-none">Les mots de passe ne correspondent pas</span>
        </div>
      </div>
      
      <div class="d-grid gap-2">
        <button type="submit" class="btn btn-primary btn-lg login-btn" id="resetBtn">
          <span class="spinner-border spinner-border-sm" role="status" aria-hidden="true"></span>
          <i class="fas fa-save me-2"></i>Mettre à jour le mot de passe
        </button>
      </div>
    </form>
  </div>
</div>

<script>
document.addEventListener('DOMContentLoaded', function() {
  // Éléments du formulaire
  const form = document.querySelector('.needs-validation');
  const passwordInput = document.getElementById('password');
  const confirmPasswordInput = document.getElementById('confirmPassword');
  const resetBtn = document.getElementById('resetBtn');
  const togglePasswordBtn = document.getElementById('togglePassword');
  const toggleConfirmPasswordBtn = document.getElementById('toggleConfirmPassword');
  
  // Validation du mot de passe
  passwordInput.addEventListener('input', function() {
    validatePassword();
    validateConfirmPassword();
  });
  passwordInput.addEventListener('blur', validatePassword);
  
  function validatePassword() {
    const passwordValue = passwordInput.value;
    const emptyFeedback = passwordInput.nextElementSibling.nextElementSibling.nextElementSibling.querySelector('.empty-feedback');
    const lengthFeedback = passwordInput.nextElementSibling.nextElementSibling.nextElementSibling.querySelector('.length-feedback');
    
    // Réinitialiser les messages
    emptyFeedback.classList.add('d-none');
    lengthFeedback.classList.add('d-none');
    
    if (passwordValue === '') {
      passwordInput.setCustomValidity('empty');
      emptyFeedback.classList.remove('d-none');
      passwordInput.classList.add('is-invalid');
    } else if (passwordValue.length < 6) {
      passwordInput.setCustomValidity('length');
      lengthFeedback.classList.remove('d-none');
      passwordInput.classList.add('is-invalid');
    } else {
      passwordInput.setCustomValidity('');
      passwordInput.classList.remove('is-invalid');
      passwordInput.classList.add('is-valid');
    }
  }
  
  // Validation de la confirmation du mot de passe
  confirmPasswordInput.addEventListener('input', validateConfirmPassword);
  confirmPasswordInput.addEventListener('blur', validateConfirmPassword);
  
  function validateConfirmPassword() {
    const confirmValue = confirmPasswordInput.value;
    const passwordValue = passwordInput.value;
    const emptyFeedback = confirmPasswordInput.nextElementSibling.nextElementSibling.nextElementSibling.querySelector('.empty-feedback');
    const matchFeedback = confirmPasswordInput.nextElementSibling.nextElementSibling.nextElementSibling.querySelector('.match-feedback');
    
    // Réinitialiser les messages
    emptyFeedback.classList.add('d-none');
    matchFeedback.classList.add('d-none');
    
    if (confirmValue === '') {
      confirmPasswordInput.setCustomValidity('empty');
      emptyFeedback.classList.remove('d-none');
      confirmPasswordInput.classList.add('is-invalid');
    } else if (confirmValue !== passwordValue) {
      confirmPasswordInput.setCustomValidity('not matching');
      matchFeedback.classList.remove('d-none');
      confirmPasswordInput.classList.add('is-invalid');
    } else {
      confirmPasswordInput.setCustomValidity('');
      confirmPasswordInput.classList.remove('is-invalid');
      confirmPasswordInput.classList.add('is-valid');
    }
  }
  
  // Afficher/masquer le mot de passe
  togglePasswordBtn.addEventListener('click', function() {
    const type = passwordInput.getAttribute('type') === 'password' ? 'text' : 'password';
    passwordInput.setAttribute('type', type);
    
    const icon = this.querySelector('i');
    icon.classList.toggle('fa-eye');
    icon.classList.toggle('fa-eye-slash');
    
    // Accessibilité
    this.setAttribute('aria-label', 
      type === 'password' ? 'Afficher le mot de passe' : 'Masquer le mot de passe'
    );
  });
  
  // Afficher/masquer la confirmation du mot de passe
  toggleConfirmPasswordBtn.addEventListener('click', function() {
    const type = confirmPasswordInput.getAttribute('type') === 'password' ? 'text' : 'password';
    confirmPasswordInput.setAttribute('type', type);
    
    const icon = this.querySelector('i');
    icon.classList.toggle('fa-eye');
    icon.classList.toggle('fa-eye-slash');
    
    // Accessibilité
    this.setAttribute('aria-label', 
      type === 'password' ? 'Afficher la confirmation du mot de passe' : 'Masquer la confirmation du mot de passe'
    );
  });
  
  // Accessibilité des boutons avec le clavier
  togglePasswordBtn.addEventListener('keydown', function(e) {
    if (e.key === 'Enter' || e.key === ' ') {
      e.preventDefault();
      this.click();
    }
  });
  
  toggleConfirmPasswordBtn.addEventListener('keydown', function(e) {
    if (e.key === 'Enter' || e.key === ' ') {
      e.preventDefault();
      this.click();
    }
  });
  
  // Validation lors de la soumission
  form.addEventListener('submit', function(event) {
    validatePassword();
    validateConfirmPassword();
    
    if (!form.checkValidity()) {
      event.preventDefault();
      event.stopPropagation();
    } else {
      // Montrer un indicateur de chargement
      resetBtn.classList.add('loading');
      resetBtn.querySelector('.spinner-border').style.display = 'inline-block';
      resetBtn.disabled = true;
    }
    
    form.classList.add('was-validated');
  });
  
  // Masquer l'indicateur de chargement au chargement de la page
  resetBtn.querySelector('.spinner-border').style.display = 'none';
});
</script>

<%- include('./partials/auth-footer') %> 